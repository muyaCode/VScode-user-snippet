{
  // $num：$1为最后光标所在位置。按tab健依次到$2,3,4..............
  // ********** vue2 **********
  "vue2页面模板": {
    "prefix": "vue2",
    "body": [
      "<template>",
      "  <div class=\"$TM_FILENAME_BASE\">",
      "    $1",
      "  </div>",
      "</template>\n",
      "<script>",
      "export default {",
      "  name: '',",
      "  data () {",
      "    return {",
      "      ",
      "    },",
      "  },",
      "  created () {",
      "    ",
      "  },",
      "  mounted () {",
      "    ",
      "  },",
      "  methods: {",
      "    ",
      "  },",
      "}",
      "</script>\n",
      "<style scoped lang=\"less\">",
      "",
      "</style>",
      "$2"
    ],
    "description": "快速生成vue2页面"
  },
  "vue2带注释页面模板": {
    "prefix": "vue2cli",
    "body": [
      "<!-- $1 -->",
      "<template>",
      "   <div class='$2'>$5</div>",
      "</template>\n",
      "<script>",
      "//这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）",
      "//例如：import 《组件名称》 from '《组件路径》';",
      "",
      "export default {",
      "  //import引入的组件需要注入到对象中才能使用",
      "  components: {},",
      "  data() {",
      "    //这里存放数据",
      "    return {",
      "      ",
      "    };",
      "  },",
      "  //监听属性 类似于data概念",
      "  computed: {},",
      "  //监控data中的数据变化",
      "  watch: {},",
      "  //生命周期 - 创建完成（可以访问当前this实例）",
      "  created() {",
      "    ",
      "  },",
      "  //生命周期 - 挂载完成（可以访问DOM元素）",
      "  mounted() {",
      "    ",
      "  },",
      "  //方法集合",
      "  methods: {",
      "    ",
      "  },",
      "  // 生命周期 - 创建之前",
      "  beforeCreate() {}, ",
      "  // 生命周期 - 挂载之前",
      "  beforeMount() {},",
      "  // 生命周期 - 更新之前",
      "  beforeUpdate() {},",
      "  // 生命周期 - 更新之后",
      "  updated() {},",
      "  // 生命周期 - 销毁之前",
      "  beforeDestroy() {},",
      "  // 生命周期 - 销毁完成",
      "  destroyed() {},",
      "  // 如果页面有keep-alive缓存功能，这个函数会触发",
      "  activated() {},",
      " }",
      "</script>\n",
      "<style lang='css' scoped>",
      "$4",
      "</style>",
      "$5"
    ],
    "description": "vue2.x带注释代码片段"
  },

  "vue2组件模板": {
    "prefix": "vue2-com",
    "body": [
      "<template>",
      "  <div class=\"$TM_FILENAME_BASE\">",
      "    $1",
      "  </div>",
      "</template>\n",
      "<script>",
      "export default {",
      "  name: '${TM_FILENAME_BASE/(^.)/${1:/upcase}/}'," /** /(^.)/ () 里面放正则表达式 ${1:/upcase}/ 正则匹配的处理*/,
      "  props: {",
      "    ",
      "  },",
      "  components: {\n",
      "    ",
      "  },",
      "  data() {",
      "    return {",
      "      ",
      "    }",
      "  },",
      "",
      "  created () {",
      "    ",
      "  },",
      "",
      "  mounted () {",
      "    ",
      "  },",
      "  methods: {",
      "    ",
      "  },",
      "}",
      "</script>\n",
      "<style scoped lang=\"less\">",
      "  ",
      "</style>",
      "$2"
    ],
    "description": "快速生成vue2组件模板"
  },

  // ********** vue3 **********
  "vue3页面模板": {
    "prefix": "vue3",
    "body": [
      "<template>",
      "  <div class=\"$TM_FILENAME_BASE\">",
      "    $1",
      "  </div>",
      "</template>\n",
      "<script setup lang='ts'>",
      "import { reactive, toRefs, onBeforeMount, onMounted } from 'vue'\n",
      "",
      "const state = reactive({})",
      "onBeforeMount(() => {",
      "  ",
      "})",
      "onMounted(() => {",
      "  ",
      "})",
      "const refState = toRefs(state)",
      "</script>\n",
      "<style scoped lang=\"less\">",
      "  ",
      "</style>",
      "$3"
    ],
    "description": "快速生成vue3页面"
  },
  "vue3带注释页面模板": {
    "prefix": "vue3cli",
    "body": [
      "<!-- $1 -->",
      "<template>",
      "   <div class=\"$2\">$3</div>",
      "</template>\n",
      "<script lang=\"ts\">",
      "import { defineComponent, getCurrentInstance, reactive, ref } from 'vue';\n",
      "export default defineComponent({",
      "  name: '$2',",
      "  // 注册你的组件",
      "  components:{  },",
      "  props: {",
      "    text: {",
      "      type: String,",
      "      default: ''",
      "    },",
      "    is_right: Boolean,",
      "    obj: {",
      "      type: Object,",
      "      default: ()=>{ return {xx:''} }",
      "    }",
      "",
      "  },",
      "  ",
      "  // 定义一个组件的 emitted 事件，当在 emits 选项中定义了原生事件 (如 click) 时，将使用组件中的事件替代原生事件侦听器。",
      "  emits: {",
      "    click: (evt: MouseEvent) => evt instanceof MouseEvent,",
      "  },",
      "  setup(props, {attrs, slots, emit, expose }){",
      "    const { proxy } = (getCurrentInstance() as any);       // 全局变量代理，用于使用 app.config.globalProperties.xxx 挂载的参数，也可以不用断言用`.?`",
      "    let datas = (props as any).datas;                      // 父组件数据",
      "",
      "    return {",
      "      proxy,",
      "      attrs,    // Attribute (非响应式对象，等同于 $attrs)，有状态，会随组件本身的更新而更新",
      "      slots,    // 插槽 (非响应式对象，等同于 $slots)，有状态，会随组件本身的更新而更新",
      "      emit,     // 触发事件 (方法，等同于 $emit)",
      "      expose,   // 暴露公共 property (函数)",
      "    }",
      "  },",
      "  ",
      "",
      "  methods:{",
      "    ",
      "  }",
      "});",
      "</script>\n",
      "<style lang=\"less\" scoped>",
      "  $4",
      "</style>",
      "$5"
    ],
    "description": "vue3.x带注释代码片段"
  },
  "vue3组件模板": {
    "prefix": "vue3-com",
    "body": [
      "<template>",
      "  <div class=\"$TM_FILENAME_BASE\">",
      "    $1",
      "  </div>",
      "</template>\n",
      "<script lang='ts'>",
      "import { reactive, toRefs,onBeforeMount, onMounted } from 'vue'\n",
      "export default {",
      "  name: '$2',",
      "  props: [],",
      "  setup() {",
      "    const state = reactive({})",
      "    onBeforeMount(() => {",
      "      ",
      "    })",
      "    onMounted(() => {",
      "      ",
      "    })",
      "    const refState = toRefs(state)",
      "    return {",
      "      ...refState",
      "    }",
      "  }",
      "}",
      "</script>\n",
      "<style scoped lang=\"less\">",
      "  ",
      "</style>",
      "$3"
    ],
    "description": "快速生成vue3组件模板"
  }
}
